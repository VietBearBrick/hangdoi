#include "iostream"
using namespace std;
const int MAX = 100;
typedef struct NODE* NODEPTR;
typedef int TYPEINFO;
//DS DAC
struct NODE
{
	int data;
	NODE* link;
};
struct Queue
{
	int front, rear;
	int elem[MAX];
};
void init(Queue& q);
int isEmpty(Queue q);
int isFull(Queue q);
void print(Queue q);
void setValue(Queue& q);
int enQueue(Queue &q, int x);
int deQueue(Queue& q);
//DSLK
typedef struct NODE1* NODEPTR1;
struct NODE1
{
	int data;
	NODE1* link;
};
struct QUEUE
{
	NODEPTR1 front, rear;
};
const int STOP = -99;
void init1(QUEUE& q);
int isEmpty1(QUEUE q);
NODEPTR1 tao_node(TYPEINFO x);
void enQueue1(QUEUE& q, TYPEINFO x);
TYPEINFO deQueue(QUEUE& q);
TYPEINFO getFront(QUEUE& q);
void setValue1(QUEUE& q);
void print1(QUEUE q);

#include"ThuVien.h"
void init(Queue& q)
{
	q.front = -1;
	q.rear = -1;
}

int isEmpty(Queue q)
{
	if (q.front == -1)
		return 1;
	return 0;
}
int isFull(Queue q)
{
	return(q.rear - q.front == MAX - 1);
}
void print(Queue q)
{
	if (!isEmpty(q))
	{
		for (int i = q.front; i <= q.rear; i++)
		{
			cout << q.elem[i] << " ";
		}
	}
	else
		cout << "Rong!!!";
}
void setValue(Queue& q)
{
	int x;
	while (1)
	{
		cout << "Nhap DL vao Queue(nhap -99 de thoat):";
		cin >> x;
		if (x == -99) break;
		enQueue(q, x);
	}
}
int enQueue(Queue& q, int x)
{
	int i;
	if (isFull(q))
		return 0;
	else
	{
		if (q.front == -1)
			q.front = 0;
		else if (q.rear == MAX - 1)
		{
			for (i = q.front; i <= q.rear; i++)
				q.elem[i - q.front] = q.elem[i];
			q.rear = MAX - 1 - q.front;
			q.front = 0;
		}
		q.rear++;
		q.elem[q.rear] = x;
		return q.rear;
	}
}
int deQueue(Queue& q)
{
	if (!isEmpty(q))
	{
		if (q.front == q.rear)
			init(q);
		else
		{
			int t = q.elem[q.front];
			q.front = q.front + 1;
			return t;
		}
	}
	else
		return 0;
}
//DSLK
void init1(QUEUE& q)
{
	q.front = NULL;
	q.rear = NULL;
}
int isEmpty1(QUEUE q)
{
	if (q.front == NULL)
		return 1;
	return 0;
}
NODEPTR1 tao_node(TYPEINFO x)
{
	NODEPTR1 p;
	p = new NODE1;
	p->data = x;
	p->link = NULL;
	return p;
}
void enQueue1(QUEUE& q, TYPEINFO x)
{
	NODEPTR1 p;
	p = tao_node(x);
	if (isEmpty1(q))
	{
		q.front = p;
		q.rear = p;

	}
}
TYPEINFO deQueue(QUEUE& q)
{
	if (isEmpty1(q))
		return -1;
	else
	{
		NODEPTR1 p = q.front;
		q.front = p->link;
		TYPEINFO t = p->data;
		delete p;
		return t;
	}
}
TYPEINFO getFront(QUEUE& q)
{
	if (isEmpty1(q))
		return -1;
	else
	{
		TYPEINFO t;
		NODEPTR1 p = q.front;
		t = p->data;
		return t;
	}
}
void setValue1(QUEUE& q)
{
	int x;
	while (1)
	{
		cout << "\n Nhap gia tri cho Queue:(Nhap -99 de dung) ";
		cin >> x;
		if (x == STOP)break;
		enQueue1(q, x);
	}
}
void print1(QUEUE q)
{
	NODEPTR1 p;
	p = q.front;
	while (p != NULL)
	{
		cout << p->data << " ";
		p = p->link;
	}
}

#include"ThuVien.h"
int main()
{
	Queue q;
	init(q);
	setValue(q);
	print(q);
	//DSLK
	QUEUE q1;
	init1(q1);
	setValue1(q1);
	print1(q1);
	system("pause");
}
